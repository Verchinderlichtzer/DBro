// <auto-generated />
using System;
using DBro.API;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DBro.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DBro.Shared.Models.DetailPesanan", b =>
                {
                    b.Property<string>("IdPesanan")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdMenu")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Diskon")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("Harga")
                        .HasColumnType("int");

                    b.Property<int>("Jumlah")
                        .HasColumnType("int");

                    b.HasKey("IdPesanan", "IdMenu");

                    b.HasIndex("IdMenu");

                    b.ToTable("DetailPesanan");
                });

            modelBuilder.Entity("DBro.Shared.Models.Diskon", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdMenu")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Nilai")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime?>("TanggalAkhir")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TanggalMulai")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdMenu");

                    b.ToTable("Diskon");
                });

            modelBuilder.Entity("DBro.Shared.Models.Menu", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("Gambar")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Harga")
                        .HasColumnType("int");

                    b.Property<byte>("Kategori")
                        .HasColumnType("tinyint");

                    b.Property<string>("Nama")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Menu");

                    b.HasData(
                        new
                        {
                            Id = "M-0001",
                            Harga = 7000,
                            Kategori = (byte)1,
                            Nama = "Sayap"
                        },
                        new
                        {
                            Id = "M-0002",
                            Harga = 8000,
                            Kategori = (byte)1,
                            Nama = "Paha Bawah"
                        },
                        new
                        {
                            Id = "M-0003",
                            Harga = 10000,
                            Kategori = (byte)1,
                            Nama = "Dada"
                        },
                        new
                        {
                            Id = "M-0004",
                            Harga = 10000,
                            Kategori = (byte)1,
                            Nama = "Paha Atas"
                        },
                        new
                        {
                            Id = "M-0005",
                            Harga = 10500,
                            Kategori = (byte)2,
                            Nama = "DBRO 1 Sayap + Nasi"
                        },
                        new
                        {
                            Id = "M-0006",
                            Harga = 11500,
                            Kategori = (byte)2,
                            Nama = "DBRO 2 Paha Bawah + Nasi"
                        },
                        new
                        {
                            Id = "M-0007",
                            Harga = 13000,
                            Kategori = (byte)2,
                            Nama = "DBRO 3 Dada / Paha Atas + Nasi"
                        },
                        new
                        {
                            Id = "M-0008",
                            Harga = 10000,
                            Kategori = (byte)3,
                            Nama = "Spaghetti"
                        },
                        new
                        {
                            Id = "M-0009",
                            Harga = 8000,
                            Kategori = (byte)4,
                            Nama = "DBRO Burger"
                        },
                        new
                        {
                            Id = "M-0010",
                            Harga = 10500,
                            Kategori = (byte)4,
                            Nama = "DBRO Reguler"
                        },
                        new
                        {
                            Id = "M-0011",
                            Harga = 12000,
                            Kategori = (byte)4,
                            Nama = "DBRO Chiz"
                        },
                        new
                        {
                            Id = "M-0012",
                            Harga = 13000,
                            Kategori = (byte)4,
                            Nama = "DBRO Premium"
                        },
                        new
                        {
                            Id = "M-0013",
                            Harga = 15000,
                            Kategori = (byte)4,
                            Nama = "DBRO Premium Chiz"
                        },
                        new
                        {
                            Id = "M-0014",
                            Harga = 9000,
                            Kategori = (byte)5,
                            Nama = "DBROsis"
                        },
                        new
                        {
                            Id = "M-0015",
                            Harga = 17000,
                            Kategori = (byte)5,
                            Nama = "DBROsis + Kentang + Minum*"
                        },
                        new
                        {
                            Id = "M-0016",
                            Harga = 13000,
                            Kategori = (byte)6,
                            Nama = "Sayhot Dada"
                        },
                        new
                        {
                            Id = "M-0017",
                            Harga = 10000,
                            Kategori = (byte)6,
                            Nama = "Sayhot Sayap"
                        },
                        new
                        {
                            Id = "M-0018",
                            Harga = 11000,
                            Kategori = (byte)6,
                            Nama = "Sayhot Paha Bawah"
                        },
                        new
                        {
                            Id = "M-0019",
                            Harga = 21000,
                            Kategori = (byte)7,
                            Nama = "Tteokbokki Reguler"
                        },
                        new
                        {
                            Id = "M-0020",
                            Harga = 30000,
                            Kategori = (byte)7,
                            Nama = "Tteokbokki Medium"
                        },
                        new
                        {
                            Id = "M-0021",
                            Harga = 40000,
                            Kategori = (byte)7,
                            Nama = "Tteokbokki Large"
                        },
                        new
                        {
                            Id = "M-0022",
                            Harga = 11000,
                            Kategori = (byte)8,
                            Nama = "Sayap Sambal Merah"
                        },
                        new
                        {
                            Id = "M-0023",
                            Harga = 12000,
                            Kategori = (byte)8,
                            Nama = "Paha Bawah Sambal Merah"
                        },
                        new
                        {
                            Id = "M-0024",
                            Harga = 13000,
                            Kategori = (byte)1,
                            Nama = "Kulit"
                        },
                        new
                        {
                            Id = "M-0025",
                            Harga = 3000,
                            Kategori = (byte)9,
                            Nama = "Prima"
                        },
                        new
                        {
                            Id = "M-0026",
                            Harga = 4000,
                            Kategori = (byte)9,
                            Nama = "Teh Botol Sosro"
                        },
                        new
                        {
                            Id = "M-0027",
                            Harga = 4000,
                            Kategori = (byte)9,
                            Nama = "S-tee"
                        },
                        new
                        {
                            Id = "M-0028",
                            Harga = 5500,
                            Kategori = (byte)9,
                            Nama = "Nestle Orange"
                        },
                        new
                        {
                            Id = "M-0029",
                            Harga = 6000,
                            Kategori = (byte)9,
                            Nama = "Milo"
                        });
                });

            modelBuilder.Entity("DBro.Shared.Models.MenuPromoPesanan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IdMenu")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdPesanan")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Jumlah")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdMenu");

                    b.HasIndex("IdPesanan");

                    b.ToTable("MenuPromoPesanan");
                });

            modelBuilder.Entity("DBro.Shared.Models.Pesanan", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Bayar")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Potongan")
                        .HasColumnType("int");

                    b.Property<int>("Subtotal")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Tanggal")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.ToTable("Pesanan");
                });

            modelBuilder.Entity("DBro.Shared.Models.Promo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdMenuDibeli")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdMenuDidapat")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("JumlahDibeli")
                        .HasColumnType("int");

                    b.Property<int>("JumlahDidapat")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TanggalAkhir")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TanggalMulai")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdMenuDibeli");

                    b.HasIndex("IdMenuDidapat");

                    b.ToTable("Promo");
                });

            modelBuilder.Entity("DBro.Shared.Models.User", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Alamat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("JenisKelamin")
                        .HasColumnType("tinyint");

                    b.Property<byte>("JenisUser")
                        .HasColumnType("tinyint");

                    b.Property<string>("Nama")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TanggalLahir")
                        .HasColumnType("datetime2");

                    b.Property<string>("Telepon")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Email");

                    b.HasIndex("Telepon")
                        .IsUnique()
                        .HasFilter("[Telepon] IS NOT NULL");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Email = "admin@gmail.com",
                            Alamat = "Bekasi",
                            JenisKelamin = (byte)1,
                            JenisUser = (byte)0,
                            Nama = "Admin",
                            Password = "IvCkErOjG9A8DPW7X23rJg==",
                            TanggalLahir = new DateTime(1974, 3, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Telepon = "0853 6466 2362"
                        });
                });

            modelBuilder.Entity("DBro.Shared.Models.DetailPesanan", b =>
                {
                    b.HasOne("DBro.Shared.Models.Menu", "Menu")
                        .WithMany("DetailPesanan")
                        .HasForeignKey("IdMenu")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBro.Shared.Models.Pesanan", "Pesanan")
                        .WithMany("DetailPesanan")
                        .HasForeignKey("IdPesanan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Pesanan");
                });

            modelBuilder.Entity("DBro.Shared.Models.Diskon", b =>
                {
                    b.HasOne("DBro.Shared.Models.Menu", "Menu")
                        .WithMany("Diskon")
                        .HasForeignKey("IdMenu")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("DBro.Shared.Models.MenuPromoPesanan", b =>
                {
                    b.HasOne("DBro.Shared.Models.Menu", "Menu")
                        .WithMany("MenuPromoPesanan")
                        .HasForeignKey("IdMenu")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBro.Shared.Models.Pesanan", "Pesanan")
                        .WithMany("MenuPromoPesanan")
                        .HasForeignKey("IdPesanan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Pesanan");
                });

            modelBuilder.Entity("DBro.Shared.Models.Pesanan", b =>
                {
                    b.HasOne("DBro.Shared.Models.User", "User")
                        .WithMany("Pesanan")
                        .HasForeignKey("Email")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DBro.Shared.Models.Promo", b =>
                {
                    b.HasOne("DBro.Shared.Models.Menu", "MenuDibeli")
                        .WithMany("PromoDibeli")
                        .HasForeignKey("IdMenuDibeli")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DBro.Shared.Models.Menu", "MenuDidapat")
                        .WithMany("PromoDidapat")
                        .HasForeignKey("IdMenuDidapat")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MenuDibeli");

                    b.Navigation("MenuDidapat");
                });

            modelBuilder.Entity("DBro.Shared.Models.Menu", b =>
                {
                    b.Navigation("DetailPesanan");

                    b.Navigation("Diskon");

                    b.Navigation("MenuPromoPesanan");

                    b.Navigation("PromoDibeli");

                    b.Navigation("PromoDidapat");
                });

            modelBuilder.Entity("DBro.Shared.Models.Pesanan", b =>
                {
                    b.Navigation("DetailPesanan");

                    b.Navigation("MenuPromoPesanan");
                });

            modelBuilder.Entity("DBro.Shared.Models.User", b =>
                {
                    b.Navigation("Pesanan");
                });
#pragma warning restore 612, 618
        }
    }
}
